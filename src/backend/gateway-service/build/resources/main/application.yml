server:
  port: 8000

spring:
  application:
    name: gateway
  cloud:
    gateway:
      default-filters:
        - name: GlobalFilter
          args:
            baseMessage: Spring Cloud Gateway Global Filter
            preLogger: true
            postLogger: true
        - name: AuthorizationFilter
        - name: Retry
          args:
            retries: 2
            statuses: INTERNAL_SERVER_ERROR,SERVICE_UNAVAILABLE
            methods: GET,POST,PUT,PATCH,DELETE
            backoff:
              firstBackoff: 100ms
              maxBackoff: 100ms
              factor: 2

      globalcors:
        corsConfigurations:
          '[/**]':
            allowedOrigins: "*" # 프론트 주소
            allowedMethods:
              - GET
              - POST
              - DELETE
              - PUT
              - PATCH
              - OPTIONS
            allowedHeaders: "*"
            allowCredentials: true

      routes:
        - id: user-service
          uri: lb://USER-SERVICE # 포워딩할 주소, http://localhost:8000/user 로 들어오면 http://localhost:64412 로 포워딩
          predicates:
            - Path=/api/user/** # 해당 gateway 서버의 /user/**로 들어오는 요은 user-service로 인식하겠다는 조건
          filters:
            - RewritePath=/api/user/?(?<segment>.*), /$\{segment}

        - id: community-service
          uri: lb://COMMUNITY-SERVICE # 포워딩 할 주소, http://localhost:8000/team 로 들어오면 http://localhost:54412 로 포워딩
          predicates:
            - Path=/api/community/** # 해당 gateway 서버의 /order/**로 들어오는 요청은 order-service로 인식하겠다는 조건
          filters:
            - RewritePath=/api/community/?(?<segment>.*), /$\{segment}

        - id: chat-service
          uri: lb://CHAT-SERVICE
          predicates:
            - Path=/api/chat/**
          filters:
            - RewritePath=/api/chat/?(?<segment>.*), /$\{segment}

        - id: signal-service
          uri: lb://SIGNAL-SERVICE
          predicates:
            - Path=/api/signal/**
          filters:
            - RewritePath=/api/signal/?(?<segment>.*), /$\{segment}

        - id: state-service
          uri: lb://STATE-SERVICE
          predicates:
            - Path=/api/state/**
          filters:
            - RewritePath=/api/state/?(?<segment>.*), /$\{segment}

        - id: notice-service
          uri: lb://NOTICE-SERVICE
          predicates:
            - Path=/api/notice/**
          filters:
            - RewritePath=/api/notice/?(?<segment>.*), /$\{segment}

jwt:
  secret: sadsae2e3214ewccwesr32trddqwrewfsdrr3

eureka:
  client:
    fetch-registry: true # 유레카 클라이언트 활성화
    register-with-eureka: true # 유레카 클라이언트 활성화
    service-url:
      defaultZone: http://localhost:8761/eureka # 유레카 클라이언트로 등록
  instance:
    instance-id: gateway-instance
  application:
    name: gateway-service

---
spring:
  config:
    activate:
      on-profile: docker

eureka:
  client:
    fetch-registry: true # 유레카 클라이언트 활성화
    register-with-eureka: true # 유레카 클라이언트 활성화
    service-url:
      defaultZone: http://discovery-service:8761/eureka # 유레카 클라이언트로 등록
  instance:
    instance-id: gateway-instance
  application:
    name: gateway-service

management:
  endpoints:
    web:
      exposure:
        include: busrefresh
